int score=0;
int scorefinal=0;
int oppfinal=0;
bool notout=true;
string oppchoice;
string current;
string perm;
string winner;
network host;

void server()
{
//show_game_window("Game Server");
show_game_window("Hand-cricket multiplayer server");
tts_voice voice;
if(host.setup_server(10000, 1, 100)==false)
{
voice.speak_wait("Error. The server could not be set up.");
exit();
}
//voice.speak("Welcome to the echo server. This server will accept up to 100 connections, and send back anything it receives.");
voice.speak("Server started");
network_event event;
while(true)
{
event=host.request();
if(event.type==event_connect)
{
voice.speak_interrupt("Peer number " + event.peer_id + " connected from " + host.get_peer_address(event.peer_id) + ".");
voice.speak("Peers now connected: " + host.connected_peers + ".");
}
if(event.type==event_receive)
{
//double raw=string_to_number(event.message);
int toss=random(0,1);
string toss_choice;
//string winner;
if(toss==0)
{
toss_choice="Tails";
}
else
{
toss_choice="Heads";
}
if(event.message==toss_choice)
{
voice.speak("Client won the toss");
winner="Client";
host.send_unreliable(event.peer_id, "Client won the toss", 0);
}
else if(event.message!=toss_choice)
{
voice.speak("Host won the toss");
winner="Host";
host.send_unreliable(event.peer_id, "Host won the toss", 0);
}
break;
}
if(event.type==event_disconnect)
{
voice.speak_interrupt("Peer number " + event.peer_id + " just disconnected.");
voice.speak("Peers now connected: " + host.connected_peers + ".");
}
if(key_down(KEY_LMENU) and key_pressed(KEY_F4))
{
voice.speak_interrupt("Exiting.");
break;
//disconnect_everyone();
// Just in case the voice hasn't finished speaking when this function returns, we wait for it to finish before actually exiting.
while(voice.speaking==true)
{
wait(5);
}
exit();
}
wait(5);
}


if(winner=="Host")
{
voice.speak("Do you want to bat or bowl first?");
string tosschoice=input_box("Choice", "Do you want to bat or bowl first?");
perm="true";
wait(5);
host.send_unreliable(event.peer_id, tosschoice, 0);
winner=tosschoice;
}
else if(winner=="Client")
{
while(true)
{
event=host.request();
if(event.type==event_receive)
{
voice.speak_wait("Client chose to " + event.message + " first.");
perm="false";
break;
}
}
}
if(perm=="true")
{
voice.speak("Ok, you will " + winner + " first.");
if(winner=="Bat")
{
while(notout)
{
string num=input_box("Number", "Enter a number from 1 to 6");
double numraw=string_to_number(num);
if(numraw>6)
{
alert("DUDE!!!", "ENTER A NUMBER FROM 1 TO 6 I SAID! DON'T YOU GET INSTRUCTIONS???");
continue;
}
if(numraw<1)
{
alert("MAN", "WHY DO YOU WANT NEGATIVE SCORES???");
continue;
}
while(true)
{
event=host.request();
if(event.type==event_receive)
{
string client=event.message;
double clientraw=string_to_number(client);
if(clientraw==numraw)
{
voice.speak_wait("Oops! You, Are, Out!");
voice.speak_wait("Your final score is " + score + " runs.");
host.send_unreliable(event.peer_id, "out", 0);
scorefinal=score;
notout=false;
break;
}
else
{
voice.speak_wait("You are not out");
host.send_unreliable(event.peer_id, "not out", 0);
}
score+=numraw;
string wordscore=number_to_words(score, false);
host.send_unreliable(event.peer_id, wordscore, 0);
voice.speak_interrupt_wait("So far, your score is " + score + " runs.");
break;
}
}
voice.speak("Now, time for the chase!");
notout=true;
while(notout)
{
string num=input_box("Number", "Enter a number from 1 to 6");
double numraw=string_to_number(num);
if(numraw>6)
{
alert("DUDE!!!", "ENTER A NUMBER FROM 1 TO 6 I SAID! DON'T YOU GET INSTRUCTIONS???");
continue;
}
if(numraw<1)
{
alert("MAN", "WHY DO YOU WANT NEGATIVE SCORES???");
continue;
}
host.send_unreliable(event.peer_id, numraw, 0);
while(true)
{
event=host.request();
if(event.type==event_receive)
{
voice.speak("Opponent is " + event.message);
if(event.message=="out")
{
voice.speak_wait("Opponent is out");
while(true)
{
event=host.request();
{
if(event.type==event_receive)
{
double oppraw=string_to_number(event.message);
oppfinal=oppraw;
}
}
}
notout=false;
}
break;
}
}
if(notout)
{
while(true)
{
event=host.request();
if(event.type==event_receive)
{
voice.speak_wait("So far, the oppenent's score is " + event.message + " runs");
break;
}
}
}
}
}

}
}
}



void disconnect_everyone()
{

timer timeout;
uint[] peer_list=host.get_peer_list();
int expected_disconnects=peer_list.length();
for(uint i=0;i < peer_list.length();i++)
{
host.disconnect_peer(peer_list[i]);
}
network_event event;
while(expected_disconnects>0)
{
event=host.request();
if(event.type==event_disconnect)
{
expected_disconnects-=1;
}
if(timeout.elapsed>=1000)
{
break;
}
wait(5);
}
}
